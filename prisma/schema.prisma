datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  firstName     String?   // Made optional
  lastName      String?   // Made optional
  name          String?
  phoneNumber   String?
  password      String?
  image         String?
  emailVerified DateTime?
  phoneVerified DateTime?
  role          String?   @default("user")
  bio           String?
  location      String?
  website       String?
  github        String?
  skills        String[]
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  messages      Message[] @relation("SentMessages")
  received      Message[] @relation("ReceivedMessages")
  products      Product[]
  likes         Like[]
  savedPosts    SavedPost[]
  comments      Comment[]
  followers     Follow[]  @relation("Following")
  following     Follow[]  @relation("Followers")

  @@index([phoneNumber])
}

model Post {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  code          String?
  link          String?
  images        Image[]    // Changed from String[] to relation
  type          String     @default("public")
  likeCount     Int        @default(0)
  commentCount  Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  author        User       @relation(fields: [authorId], references: [id])
  authorId      String     @db.ObjectId
  comments      Comment[]
  likes         Like[]
  savedBy       SavedPost[]

  @@index([authorId])
  @@index([type])
}

// New Image model for better image management
model Image {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  publicId    String?  // For cloud storage (e.g., Cloudinary) reference
  width       Int?
  height      Int?
  size        Int?
  format      String?  // jpg, png, etc.
  createdAt   DateTime @default(now())
  
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String   @db.ObjectId

  @@index([postId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId

  @@unique([postId, userId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId

  @@index([postId, authorId])
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId

  @@unique([postId, userId])
  @@index([userId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String  @db.ObjectId
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  category    String
  type        String?
  preview     String?
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
